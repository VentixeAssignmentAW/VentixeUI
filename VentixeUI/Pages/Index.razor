@page "/"
@using VentixeUI.Services
@inject IJSRuntime JS
@inject IEventService EventService
@inject IBookingService BookingService
@implements IAsyncDisposable


<PageTitle>Dashboard - Ventixe</PageTitle>

<div class="dashboard">
    <div class="row g-4 mb-4">
        <!-- Upcoming Events Card -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="icon-circle bg-primary-light me-4">
                        <i class="fas fa-calendar text-primary"></i>
                    </div>
                    <div>
                        <h6 class="stat-label mb-2">Upcoming Events</h6>
                        <h2 class="stat-value mb-0">@_upcomingEventsCount</h2>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Bookings Card -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="icon-circle bg-primary-light me-4">
                        <i class="fas fa-ticket-alt text-primary"></i>
                    </div>
                    <div>
                        <h6 class="stat-label mb-2">Total Bookings</h6>
                        <h2 class="stat-value mb-0">@_totalBookings</h2>
                    </div>
                </div>
            </div>
        </div>

        <!-- Total Revenue Card -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="icon-circle bg-primary-light me-4">
                        <i class="fas fa-tags text-primary"></i>
                    </div>
                    <div>
                        <h6 class="stat-label mb-2">Total Revenue</h6>
                        <h2 class="stat-value mb-0">@_totalRevenue.ToString("C")</h2>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4 mb-4">
        <!-- Events Timeline Chart -->
        <div class="col-lg-8">
            <div class="card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h6 class="card-title mb-0">Events Timeline (Next 12 Months)</h6>
                    </div>
                    <div class="chart-container" style="position: relative; height: 300px;">
                        <canvas id="eventsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Bookings -->
        <div class="col-lg-4">
            <div class="card h-100">
                <div class="card-body">
                    <h6 class="card-title mb-4">Recent Bookings</h6>
                    <div class="recent-bookings">
                        @if (_allBookings.Any())
                        {
                            @foreach (var booking in _allBookings.OrderByDescending(b => b.BookingDate).Take(5))
                            {
                                <div class="booking-item mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span>@(_eventNames.GetValueOrDefault(booking.EventId, "Unknown Event"))</span>
                                        <span class="badge badge-@(GetStatusClass(booking.Status.ToString()))">@booking.Status</span>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="text-muted small">@booking.Email</span>
                                        <span class="text-primary">@booking.Price.ToString("C")</span>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-muted">No recent bookings</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private IJSObjectReference? _module;
    private int _upcomingEventsCount = 0;
    private int _totalBookings = 0;
    private decimal _totalRevenue = 0;
    private List<EventDto> _upcomingEvents = new();
    private List<BookingDto> _allBookings = new();
    private Dictionary<Guid, string> _eventNames = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/charts.js");
                await LoadDashboardDataAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.DisposeAsync();
        }
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            var events = await EventService.GetAllEventsAsync();
            var today = DateTime.Now.Date;

            _upcomingEvents = events
                .Where(e => e.EndTime.Date >= today)
                .OrderBy(e => e.StartTime)
                .ToList();
            
            _upcomingEventsCount = _upcomingEvents.Count;
            _eventNames = events.ToDictionary(e => e.Id, e => e.Title);

            _allBookings.Clear();
            foreach (var evt in events)
            {
                var bookings = await BookingService.GetBookingsForEventAsync(evt.Id);
                _allBookings.AddRange(bookings);
            }

            _totalBookings = _allBookings.Count;
            _totalRevenue = _allBookings.Sum(b => b.Price);

            StateHasChanged();
            await InitializeChartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private string GetStatusClass(string status) => status.ToLower() switch
    {
        "confirmed" => "confirmed",
        "pending" => "pending",
        "cancelled" => "cancelled",
        "paid" => "paid",
        _ => "default"
    };

    private async Task InitializeChartAsync()
    {
        try
        {
            var today = DateTime.Now.Date;
            var months = Enumerable.Range(0, 12)
                .Select(i => today.AddMonths(i))
                .Select(date => new DateTime(date.Year, date.Month, 1))
                .ToList();

            var monthlyData = months.Select(monthStart =>
            {
                var monthEnd = monthStart.AddMonths(1);
                return _upcomingEvents.Count(e => 
                    e.StartTime.Date <= monthEnd && e.EndTime.Date >= monthStart);
            }).ToList();

            var chartData = new
            {
                labels = months.Select(m => m.ToString("MMM yyyy")).ToArray(),
                datasets = new[]
                {
                    new
                    {
                        data = monthlyData.ToArray()
                    }
                }
            };

            if (_module != null)
            {
                await _module.InvokeVoidAsync("initializeChart", "eventsChart", chartData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chart error: {ex.Message}");
        }
    }
} 